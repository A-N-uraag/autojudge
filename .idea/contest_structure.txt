import json

class Problem(object):

    def __init__(self, ctr_file, dumpname):
        # json read and dump a dictonary
        # Fields in the dictionary
        # - TestFolder (Folder)
        # - StartingCodeFolder (Folder)
        # - SubmissionFolder (Folder)
        # - CompilationScriptFile (coding language (.sh, .py))
        # - TestScriptFile (coding language (.sh, .py))
        # - MetadataFile (YAML)
        #       - ProblemStatement (string)
        #       - InputFormatAndConstraints (string)
        #       - OutputFormat (string)
        #       - Difficulty (int)
        #       - TimeLimit (int)
        #       - MemoryLimit (int)
        #       - FileFormat (string)
        # dumpname is the name used to dump all this into a file

    def save(self):
        # Dump the attributes of the class


SubmissionFolder:
- Create one folder per unique ID
- For a given unique ID, create folders for each submission
- For a given unique ID, there is a SubmissionMetaData file pertaining to each ID
- SubmissionMetaData is not created for public test cases

SubmissionMetaData:
- For every entry create a YAML entry.
# Example:
- Sub1
    - TimeSubmitted: timestamp
    - Test1
        - TimeTaken: time stuff
        - MemConsumed: mem stuff
        - Verdict: 0 - n number


class Contest:

    def __init__(self, ctr_file, dumpname):
        # json read and dump a dictionary
        # - Poster_IDs (list of strings)
        # - Participant_IDs (list of strings)
        # - Start time (timestamp)
        # - End time (timestamp)
        # dumpname is the name used to dump all this into a file
        # self.problems = None

    def add_problem(self, ctr_file):
        # self.problems.append(Problem(ctr_file))

    def save(self):
        # dump attributes and problem attributes
